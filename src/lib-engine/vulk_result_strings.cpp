#include "engine80.hpp"
#include <vulkan/vulkan.h>
#include <unordered_map>

namespace
{
	std::unordered_map<VkResult, std::string> vulkResultMap {
		std::make_pair(VK_SUCCESS,"VK_SUCCESS"),
		std::make_pair(VK_NOT_READY,"VK_NOT_READY"),
		std::make_pair(VK_TIMEOUT,"VK_TIMEOUT"),
		std::make_pair(VK_EVENT_SET,"VK_EVENT_SET"),
		std::make_pair(VK_EVENT_RESET,"VK_EVENT_RESET"),
		std::make_pair(VK_INCOMPLETE,"VK_INCOMPLETE"),
		std::make_pair(VK_ERROR_OUT_OF_HOST_MEMORY,"VK_ERROR_OUT_OF_HOST_MEMORY"),
		std::make_pair(VK_ERROR_OUT_OF_DEVICE_MEMORY,"VK_ERROR_OUT_OF_DEVICE_MEMORY"),
		std::make_pair(VK_ERROR_INITIALIZATION_FAILED,"VK_ERROR_INITIALIZATION_FAILED"),
		std::make_pair(VK_ERROR_DEVICE_LOST,"VK_ERROR_DEVICE_LOST"),
		std::make_pair(VK_ERROR_MEMORY_MAP_FAILED,"VK_ERROR_MEMORY_MAP_FAILED"),
		std::make_pair(VK_ERROR_LAYER_NOT_PRESENT,"VK_ERROR_LAYER_NOT_PRESENT"),
		std::make_pair(VK_ERROR_EXTENSION_NOT_PRESENT,"VK_ERROR_EXTENSION_NOT_PRESENT"),
		std::make_pair(VK_ERROR_FEATURE_NOT_PRESENT,"VK_ERROR_FEATURE_NOT_PRESENT"),
		std::make_pair(VK_ERROR_INCOMPATIBLE_DRIVER,"VK_ERROR_INCOMPATIBLE_DRIVER"),
		std::make_pair(VK_ERROR_TOO_MANY_OBJECTS,"VK_ERROR_TOO_MANY_OBJECTS"),
		std::make_pair(VK_ERROR_FORMAT_NOT_SUPPORTED,"VK_ERROR_FORMAT_NOT_SUPPORTED"),
		std::make_pair(VK_ERROR_FRAGMENTED_POOL,"VK_ERROR_FRAGMENTED_POOL"),
		std::make_pair(VK_ERROR_UNKNOWN,"VK_ERROR_UNKNOWN"),
		std::make_pair(VK_ERROR_OUT_OF_POOL_MEMORY,"VK_ERROR_OUT_OF_POOL_MEMORY"),
		std::make_pair(VK_ERROR_INVALID_EXTERNAL_HANDLE,"VK_ERROR_INVALID_EXTERNAL_HANDLE"),
		std::make_pair(VK_ERROR_FRAGMENTATION,"VK_ERROR_FRAGMENTATION"),
		std::make_pair(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,"VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"),
		std::make_pair(VK_PIPELINE_COMPILE_REQUIRED,"VK_PIPELINE_COMPILE_REQUIRED"),
		std::make_pair(VK_ERROR_SURFACE_LOST_KHR,"VK_ERROR_SURFACE_LOST_KHR"),
		std::make_pair(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,"VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"),
		std::make_pair(VK_SUBOPTIMAL_KHR,"VK_SUBOPTIMAL_KHR"),
		std::make_pair(VK_ERROR_OUT_OF_DATE_KHR,"VK_ERROR_OUT_OF_DATE_KHR"),
		std::make_pair(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,"VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"),
		std::make_pair(VK_ERROR_VALIDATION_FAILED_EXT,"VK_ERROR_VALIDATION_FAILED_EXT"),
		std::make_pair(VK_ERROR_INVALID_SHADER_NV,"VK_ERROR_INVALID_SHADER_NV"),
		std::make_pair(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,"VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"),
		std::make_pair(VK_ERROR_NOT_PERMITTED_KHR,"VK_ERROR_NOT_PERMITTED_KHR"),
		std::make_pair(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,"VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"),
		std::make_pair(VK_THREAD_IDLE_KHR,"VK_THREAD_IDLE_KHR"),
		std::make_pair(VK_THREAD_DONE_KHR,"VK_THREAD_DONE_KHR"),
		std::make_pair(VK_OPERATION_DEFERRED_KHR,"VK_OPERATION_DEFERRED_KHR"),
		std::make_pair(VK_OPERATION_NOT_DEFERRED_KHR,"VK_OPERATION_NOT_DEFERRED_KHR"),
		std::make_pair(VK_ERROR_OUT_OF_POOL_MEMORY_KHR,"VK_ERROR_OUT_OF_POOL_MEMORY_KHR"),
		std::make_pair(VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,"VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR"),
		std::make_pair(VK_ERROR_FRAGMENTATION_EXT,"VK_ERROR_FRAGMENTATION_EXT"),
		std::make_pair(VK_ERROR_NOT_PERMITTED_EXT,"VK_ERROR_NOT_PERMITTED_EXT"),
		std::make_pair(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,"VK_ERROR_INVALID_DEVICE_ADDRESS_EXT"),
		std::make_pair(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR,"VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"),
		std::make_pair(VK_PIPELINE_COMPILE_REQUIRED_EXT,"VK_PIPELINE_COMPILE_REQUIRED_EXT"),
		std::make_pair(VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT,"VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT"),
		std::make_pair(VK_RESULT_MAX_ENUM,"VK_RESULT_MAX_ENUM"),
	};


}

namespace e80::vulk {
	std::string const & getStringForVkResult(VkResult value)
	{
		auto it = vulkResultMap.find(value);
		if (it == vulkResultMap.end())
		{
			return "<unknown>";
		}
		return it->second;
	}
}
